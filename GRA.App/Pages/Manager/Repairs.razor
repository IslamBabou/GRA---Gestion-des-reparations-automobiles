@page "/Repairs"
@layout SideBarLayout
@using GRA.App.Demos
@using Syncfusion.Blazor.Grids




<div class="col-lg-12 control-section">
    <div class="content-wrapper wow fadeInDown" style="margin:3%;">
        <div class="row">
            <div class="col-12">
                <h2 style="margin-bottom:3%;">Liste des réparations</h2> 
            </div>
        </div>
        <div class="row justify-content-center">
            <SfGrid DataSource="@GridData" 
                    Toolbar="@(new List<string>() { "Add", "Update", "Cancel", "Search" })" 
                    AllowPaging="true" 
                    class="bg-white" 
                    style="opacity:0.95; border-radius:10px;" 
                    OnActionBegin="OnActionBegin" 
                    OnActionComplete="OnActionComplete">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(RepairDto.Id)" HeaderText="Id" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.Code)" HeaderText="Code" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.CustomerLastName)" HeaderText="Nom de client" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.CustomerFirstName)" HeaderText="Prénom de client" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.NumberPlate)" HeaderText="Immatriculation" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.Model)" HeaderText="Modele" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.Brand)" HeaderText="Marque" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.DateOpening)" HeaderText="Date de début" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.DateClosing)" HeaderText="Date de fin" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.Status)" HeaderText="Status" Width="200"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.Total)" HeaderText="Total à payer" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.Status)" HeaderText="Montant payé"  TextAlign="TextAlign.Right" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(RepairDto.PaymentStatus)" HeaderText="Status de paiement"Width="250"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    [Inject]
    IRepairService repairService { get; set; }
    public IEnumerable<RepairDto>? GridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GridData = await repairService.GetAllRepair();
    }

    private async Task OnActionBegin(ActionEventArgs<AddOrUpdateRepairDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Add")
        {
            await CreateRepairAsync(args.Data);
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Edit")
        {
            await UpdateRepairAsync(args.Data);
        }

    }

    private async Task OnActionComplete(ActionEventArgs<RepairDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await RefreshGridData();
        }
    }

    private async Task CreateRepairAsync(AddOrUpdateRepairDto repair)
    {
        // Create the repair and get the generated Id
        await repairService.CreateRepair(repair);

        GridData = await repairService.GetAllRepair();
        StateHasChanged();
    }

    private async Task UpdateRepairAsync(AddOrUpdateRepairDto repair)
    {
        var updatedRepair = await repairService.CreateRepair(repair);
        
        StateHasChanged();
    }

    private async Task RefreshGridData()
    {
        GridData = (await repairService.GetAllRepair()).ToList();
        StateHasChanged();
    }
}
}
